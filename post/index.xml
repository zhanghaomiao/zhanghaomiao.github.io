<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Haomiao</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Mon, 15 Apr 2019 16:59:45 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=true) shape:circle]</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>fortran programming</title>
      <link>/post/fortran-programming/</link>
      <pubDate>Mon, 15 Apr 2019 16:59:45 +0000</pubDate>
      <guid>/post/fortran-programming/</guid>
      <description>

&lt;p&gt;&lt;h2&gt;Table of Contents&lt;/h2&gt;
HAHAHUGOSHORTCODE-TOC0-HBHB&lt;/p&gt;

&lt;h2 id=&#34;模块创建显示接口&#34;&gt;模块创建显示接口&lt;/h2&gt;

&lt;p&gt;在模块中编译和调用程序时, 过程接口的所有细节对编译器都是有效的. 当调用程序时, 编译器可以自动检测过程调用中的参数个数, 类型, 是否参数是数组, 已经每个参数的 INTENT 属性. 在模块内, 编译过程和用USE关联访问过程具有一个显示接口 (explicit interface). Fortran 编译器清楚的知道过程每个参数的所有细节. 不在模块内的过程称为隐式接口 (implicit interface). Fortran 编译器调用程序时, 不知道这些过程的信息.&lt;/p&gt;

&lt;h2 id=&#34;函数-子程序作为参数传递&#34;&gt;函数/子程序作为参数传递&lt;/h2&gt;

&lt;p&gt;在调用和被调用函数中，函数被声明为外部量时(external), 用户自定义函数才可以当做调用参数传递．　当参数表中的某个名字被声明为外部变量，相当于告诉编译器在参数表中传递的是独立的已编译的函数.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数作为参数传递&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;program main
  implicit none
  interface  ! must specify the interface
      subroutine runfunc(fun, array)
          real*8 :: array(:, :)
          real*8, external :: fun
      end subroutine
  end interface
  real*8 :: array(3,3)
  real*8,external :: fun1
  array = 2d0
  call runfunc(fun1, array)
end program
  
subroutine runfunc(fun, array)
  implicit none
  interface  !must specify the interface
      real*8 function fun(array)
          real*8 :: array(:, :)
      end function
  end interface
  real*8 :: array(:, :)
  print*, fun(array)
end subroutine
  
real*8 function fun1(array)
  implicit none
  real*8 :: array(:, :)
  integer :: i, j
  fun1 = 0d0
  do i = 1, size(array, 1)
      do j = 1, size(array, 2)
          fun1 = fun1 + array(i,j)
      enddo
  enddo
end function
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;子程序作为参数传递&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;program main
  implicit none
  integer :: n = 5
  external :: add, prod
  real*8 :: array(5) = (/1,2,3,4,5/)
  call passsub(add, array, n)
  call passsub(prod, array, n)
end program
  
subroutine passsub(sub, array, n)
  integer :: n
  external :: sub
  real*8 :: array(n)
  call sub(array, n)
end subroutine
  
subroutine add(array, n)
  integer :: n
  real*8 :: array(n)
  integer :: i
  real*8 :: sum = 0
  
  do i = 1, n
      sum = sum+ array(i)
  enddo
  print*, sum
end subroutine
  
subroutine prod(array, n)
  integer :: n
  real*8 :: array(n)
  integer :: i
  real*8 :: cuml = 1
  do i = 1, n
      cuml = cuml * array(i)
  enddo
  print*, cuml
end subroutine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;子程序传递多维数组&#34;&gt;子程序传递多维数组&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;显示结构的形参数组 (explicit-shape dummy arrays)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;subroutine process1(data1, data2, n, m)
integer, intent(in) :: n, m
real,intent(in),dimension(n,m) :: data1
real,intent(out), dimension(n,m) :: data2
data2 = 3 * data1
end subroutine
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不定结构形参数组 (assumed-shape dummy arrays)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数组中的每个下标都用冒号代替, 只有子程序或者函数具有显示接口时, 才能使用这种数组. 通常采用将子程序放入模块中, 然后在程序中使用该模块. 编译器可以从接口信息判断每个数组的大小和结构.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;module test_module
contains
    subroutine process2(data1, data2)
    real, intent(in), dimension(:,:) :: data1
    real, intent(out), dimension(:, :) :: data2
    data2 = 3 * data1
    end subroutine
end module
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关键字参数和可选参数&#34;&gt;关键字参数和可选参数&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;关键字参数
如果过程接口是显示的, 可以改变参数表中调用参数的顺序, 可以用关键字参数(keyword arguments) 提供更强的灵活性&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;module procs
contains
  real, function calc(first, second, third)
  implicit none
  real, intent(in) :: first, second, third
  calc = (fisrt - second) / third
  end function calc
end module
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在调用时, 即可以用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;program test_keywords
implicit none
write(*, *) calc(3., 1., 2.)
write(*, *) calc(first=3., second=1., third=2.)
write(*, *) calc(3., third=2., second=1.)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;可选参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过在形参申明中加入 &lt;code&gt;optional&lt;/code&gt; 属性, 指定可选参数
  &lt;code&gt;integer, intent(in), optioncal :: upper_limit&lt;/code&gt;
  可选参数是否出现, 可以用 &lt;strong&gt;fortran&lt;/strong&gt; 中的 &lt;code&gt;present&lt;/code&gt; 来判断&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;  module process
  contains
      subroutine extremes(a,n, maxval, pos_maxval)
          integer, intent(in) :: n
          real, intent(in), dimension(n) :: a
          real, intent(out), optional :: maxval
          integer, intent(out), optional :: pos_maxval
          integer :: i
          real :: real_max
          integer :: pos_max

          real_max = a(1)
          pos_max = 1
          do i = 2, n
              max: if (a(i) &amp;gt; real_max) then
                  real_max = a(i)
                  pos_max = i
              end if max
          enddo
          if (present(maxval)) then
              maxval = real_max
          endif
          if (present(pos_maxval)) then
              pos_maxval = pos_max
          endif
      end subroutine
  end module
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;过程接口和接口块&#34;&gt;过程接口和接口块&lt;/h2&gt;

&lt;p&gt;想要使用不定结构形参数组或者可选参数这类 Fortran 高级特性, 程序必须要有显示接口. 创建显示接口最简单的方法是将过程放在模块中, 但是将过程放在模块中, 在一些场合不可能. 如过程和函数是用早期的 fortran 语言编写, 或者外部函数库是用 C 或者其他语言编写, 这样将过程放在一个模块中并不可能.&lt;/p&gt;

&lt;p&gt;当不能把过程放在模块中, fortran 允许在调用程序中定义一个接口块, 接口快指定了过程所有的接口特征, 编译器根据接口快中的信息执行一致性检查.  接口的一般形式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;interface
    interface_body_1
    inteface_body_2
    ...
end interface
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用接口时, 将它放在调用调用单元的最前面&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;program interface_example
implicit none
interface
    subroutine sort(a,n)
    implicit none
    real, dimension(:), intent(inout) :: a
    integer, intent(in) :: n
    end sobroutine sort
end interface

real, dimension(6) :: array = (/1., 5., 3., 2., 6., 4.,/)
integer :: nvals = 6
call sort(n = nvals, a = array)
end program
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当为大型旧版程序或者函数库创建接口时, 可以将它们放在调用一个模块中, 可以使用 Use 访问&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;module interface_def ! no contains statement
interface
  subroutine sort(array, n)
  ...
  end surtoutine
  subroutine sort2(array, n)
  ...
  end subroutine
end interface
end module
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接口是独立的作用域, 接口块中的形参变量必须单独声明, 即使这些变量已经在相关的作用域中已经被声明过了. Fortran 2003 含有 import 语句, 如果 import 语句出现在接口定义中, 那么import 语句中指明的变量会被导入, 不需要在接口中再次申明.  如果 import 语句中没有带变量, 所有变量都会被导入.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Named entities from the host scoping unit are not accessible in an interface body that is not a module procedure interface body. The IMPORT statement makes those entities accessible in such interface body by host association.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;generic&#34;&gt;Generic&lt;/h2&gt;

&lt;p&gt;使用通用接口块定义过程，过程之间通过不同类型的输入参数区分，可以处理不同类型的数据. 给　&lt;code&gt;interface&lt;/code&gt; 加入一个通用名，那么在接口快定义的每个过程接口可以看作一个通过过程．通用过程中所有过程要么都是子程序，要么都是函数.&lt;/p&gt;

&lt;p&gt;例如对于不同类型的数据进行排序，创建一个通用子程序 &lt;code&gt;sort&lt;/code&gt; 实现排序，可以使用通用接口块&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;interface sort
    subroutine sorti(array, nvals)
    ...
    end subroutine sorti
    subroutine sortr(array, nvals)
    ...
    end subroutine sortr
    ...
    subroutine
end interface
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;模块中用于过程的通用接口&#34;&gt;模块中用于过程的通用接口&lt;/h2&gt;

&lt;p&gt;如果子程序都在一个模块中，并且已经有显示接口，如果再加入过程接口，这样是非法的，不能用上述方式添加通用接口．&lt;code&gt;fortran&lt;/code&gt; 包含了一个可用在通用接口模块中的特殊&lt;code&gt;module procedure&lt;/code&gt; 语句．&lt;/p&gt;

&lt;p&gt;如果４个排序子程序定义在一个模块中，　子程序sort 通用接口是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;interface sort
    module procedure sorti
    module procedure sortr
    module procedure sortd
    ...
end interface sort
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例如，找出一个数组的最大值和最大值位置，不管数组的类型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;module generic_maxval
implicit none
interface maxval
    module procedure maxval_i
    module procedure maxval_r
    ...
end interface
contains
    subroutine maxval_i (array, nvals, value_max, pos_maxval)
        implicit none
        integer, intent(in) :: nvals
        integer, intent(in), dimension(nvals) :: array
        integer, intent(out) :: value_max
        integer, intent(out), optional :: pos_maxval
        integer :: i
        integer :: pos_max
        value_max = array(i)
        pos_max = 1
        do i = 2, nvals
            if (array(i) &amp;gt; value_max) then
                value_max = array(i)
                pos_max = i
            end if
        enddo
        if (present(pos_maxval)) then
            pos_maxval = pos_max
        end if
    end sobroutine maxval_i

    subroutine maxval_r(array, nvals, value_max, pos_maxval)
    ...
    end subroutine

    ...
end module generic_maxval
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;内置模块&#34;&gt;内置模块&lt;/h2&gt;

&lt;p&gt;ortran 2003 定义了内置模块(intrinsic module), 这种模块是由 fortran 编译器创造者预定义和编写的．fortran　2003 中，有三种内置模块&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ISO_FORTRAN_ENV&lt;/code&gt; 定义了描述特定计算机中存储器特征的向量(标准的整型包含多少bit, 标准字符包含多少bit),以及该机器所定义的I/O 单元&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ISO_C_BINDING&lt;/code&gt; 包含了FORTRAN 编译其和特定处理器的c 语言互操作是必要数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IEEE&lt;/code&gt; 处理器运行浮点数的特征&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;fortran-指针&#34;&gt;Fortran 指针&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fortran 申明变量为指针时, 需要使用 &lt;code&gt;Pointer&lt;/code&gt; 属性, 并申明指针的类型&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在 Fortran 变量的类型定义语句中, 加入&lt;code&gt;Target&lt;/code&gt;属性, 将其声明为目标变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;Program test_ptr
implicit none
real, pointer::p
real, target :: t1 = 10, t2=-17
p =&amp;gt; t1
print*, p, t1, t2
p =&amp;gt; t2
print*, p, t1, t2
end program
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;指针有三种状态, &lt;strong&gt;undefined&lt;/strong&gt;, &lt;strong&gt;associated&lt;/strong&gt;, &lt;strong&gt;disassociated&lt;/strong&gt;, 通过使用 &lt;code&gt;NuLLIFY&lt;/code&gt; 语句将指针和所有目标变量断开&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;指针数组. 指向数组的指针必须声明其指向数组的类型和维数, 不需要申明每一维的宽度&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/zhanghaomiao/2591d8f6fe65f84d4984131cbd553317.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;mixing-programming-with-c-c&#34;&gt;Mixing programming with C/C++&lt;/h2&gt;

&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在C中, 所有子程序都是函数, void 类型函数不返回值&lt;/li&gt;
&lt;li&gt;在 fortran 中, 函数会传递一个返回值, 子程序不传递返回值&lt;/li&gt;
&lt;li&gt;Fortran 调用 C 函数时

&lt;ul&gt;
&lt;li&gt;被调用的C函数返回一个值, 会从Fortran 中将其作为函数来调用&lt;/li&gt;
&lt;li&gt;被调用的C函数不返回值, 将其作为子程序来调用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;C 函数调用 Fortran 子程序时

&lt;ul&gt;
&lt;li&gt;如果被调用Fortran 子程序是一个函数, 会从 C 中将其作为一个返回兼容数据类型的函数来调用&lt;/li&gt;
&lt;li&gt;如果被调用的 Fortran 子程序是一个子例程, 会从 C 中将其作为一个返回 int 或 void 值的函数来调用. 如果Fortran 子例程使用交替返回 (返回值为 return 语句中的表达式), 会返回一个值. 如果 return 语句中没有出现表达式, 在Subroutine 语句中申明了交替返回, 则返回 0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;C 区分大小写, Fortran 忽略大小写

&lt;ul&gt;
&lt;li&gt;在 C 子程序中, 使C函数名全部小写&lt;/li&gt;
&lt;li&gt;用 -U 选项编译 Fortran 程序, 会告知编译器保留函数/子程序名称现有大小写&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fortran 在编译时,在子程序名和末尾加入下划线, C 编译时函数名称和用户指定名称一致. (Fortran 对于块过程名有两个前导下划线, 减少与用户指定子例程名的冲突)

&lt;ul&gt;
&lt;li&gt;在 C 函数中, 通过在函数名末尾添加下划线更改名称&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;BIND(C)&lt;/code&gt; 属性声明表明外部函数 是C 语言函数&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;-ext_names&lt;/code&gt; 选项编译对于无下划线外部名称引用&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fortran 传递字符型参数时, 会传递一个附加参数, 指定字符串的长度, 这个参数在 C 中为 &lt;code&gt;long int&lt;/code&gt; 量, 按值进行传递&lt;/li&gt;
&lt;li&gt;C 数组从 0 开始, Fortran 数组默认以 1 开始&lt;/li&gt;
&lt;li&gt;C 数组按行主顺序存储,  Fortran 按列主顺序存储&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;数据类型兼容&#34;&gt;数据类型兼容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;C 数据类型 &lt;code&gt;int, long int, long&lt;/code&gt; 在 32 位环境下是等价的 (4 字节). 在 64 位环境中, &lt;code&gt;long&lt;/code&gt; 和指针为8 字节&lt;/li&gt;
&lt;li&gt;数组和结构的元素及字段需要兼容&lt;/li&gt;
&lt;li&gt;不能按值传递数组, 字符串和结构&lt;/li&gt;
&lt;li&gt;按值传递时, 可以使用 &lt;code&gt;%VAL(arg)&lt;/code&gt;, 或者Fortran95 程序具有显含的接口块, 使用 &lt;code&gt;VALUE&lt;/code&gt; 属性声明了伪参数&lt;/li&gt;
&lt;li&gt;数据大小与对齐, 参考 &lt;a href=&#34;https://docs.oracle.com/cd/E19205-01/819-5262/6n7bvdr18/&#34;&gt;https://docs.oracle.com/cd/E19205-01/819-5262/6n7bvdr18/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;按引用传递参数&#34;&gt;按引用传递参数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;简单数据类型&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;structure&lt;/li&gt;
&lt;li&gt;array&lt;/li&gt;
&lt;li&gt;按值传递参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;代码 example, 参考 &lt;a href=&#34;https://github.com/zhanghaomiao/C_FORTRAN_MIX&#34;&gt;https://github.com/zhanghaomiao/C_FORTRAN_MIX&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;iso-c-binding-模块&#34;&gt;&lt;code&gt;ISO_C_BINDING&lt;/code&gt; 模块&lt;/h3&gt;

&lt;p&gt;Fortran 2003 提供了内置模块,处理C 和  fortran 数据类型的转化&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;c_associated(c_ptr1[, c_ptr_2])&lt;/code&gt;: determines the status of the C pointer c_ptr_1 or if c_ptr_1 is associated with the target c_ptr_2&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Fortran&#34;&gt;subroutine association_test(a,b)
use iso_c_binding, only: c_associated, c_loc, c_ptr
implicit none
real, pointer :: a
type(c_ptr) :: b
if(c_associated(b, c_loc(a))) &amp;amp;
stop &#39;b and a do not point to same target&#39;
end subroutine association_test
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;c_f_pointer(cptr, fptr[,shape])&lt;/code&gt; Assign the target, the C pointer, cptr to Frotran pointer.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;c_f_procpointer(cptr, fptr)&lt;/code&gt; assigns the target of the C function pointer &lt;code&gt;cptr&lt;/code&gt; to the Fortran procedure pointer &lt;code&gt;fptr&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;c_funloc(x)&lt;/code&gt; determine the C address of the argument, return type is &lt;code&gt;c_funptr&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;c_loc(x)&lt;/code&gt; determine the C address of the argument, return type is &lt;code&gt;c_ptr&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;c_sizeof(x)&lt;/code&gt; calculate the number of bytes of storage the expression x occupies&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-fortran&#34;&gt;use iso_c_binding
real(c_float) :: r, s(5)
print *, (c_sizeof(s)/c_sizeof(r) == 5)
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据类型的对应关系,参考 &lt;a href=&#34;http://fortranwiki.org/fortran/show/iso_c_binding&#34;&gt;Fortran wiki&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;working-with-c&#34;&gt;Working with C++&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在使用C++程序时, 需要加入 extern &amp;lsquo;C&amp;rsquo; 关键字&lt;/li&gt;
&lt;li&gt;在使用到 C++ 标准库的数据结构时, 链接时需要加入标准C++库 (&lt;code&gt;-lstdc++&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Example
&lt;script src=&#34;https://gist.github.com/zhanghaomiao/5c12cf5c54f405bf0b4df04c69ceb66c.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://fortranwiki.org/fortran/show/iso_c_binding&#34;&gt;http://fortranwiki.org/fortran/show/iso_c_binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gfortran/Interoperability-with-C.html#Interoperability-with-C&#34;&gt;https://gcc.gnu.org/onlinedocs/gfortran/Interoperability-with-C.html#Interoperability-with-C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/22813423/c-f-pointer-does-not-work&#34;&gt;https://stackoverflow.com/questions/22813423/c-f-pointer-does-not-work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yolinux.com/TUTORIALS/LinuxTutorialMixingFortranAndC.html&#34;&gt;http://www.yolinux.com/TUTORIALS/LinuxTutorialMixingFortranAndC.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/cd/E19205-01/819-5262/6n7bvdr18/&#34;&gt;https://docs.oracle.com/cd/E19205-01/819-5262/6n7bvdr18/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GDB 调试</title>
      <link>/post/gdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/post/gdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;要求&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;所有的程序编译时需要使用 &lt;code&gt;-g&lt;/code&gt; 参数， 这样gdb程序可以识别&lt;/li&gt;
&lt;li&gt;编译时不要使用优化，使用优化时一些变量的值无法跟踪， 即优化等级设置为 &lt;code&gt;O0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;命令&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; 后加行数， 设置断点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;li&lt;/code&gt;(start, [end]) 显示在start 和 end 之间的代码， end 为可选参数， 如果没有 end, 则显示以start 为中心前后5句代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; 重新开始调试程序, 在遇到断点处终止&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; 开始调试程序，在遇到断点处终止, 与 &lt;code&gt;step into my code&lt;/code&gt; 功能类似&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; 可后接参数 N ， 表示step n 次， 与 &lt;code&gt;step into&lt;/code&gt; 功能类似&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; 可后接参数 N ， 表示next n 次， 与 &lt;code&gt;step over&lt;/code&gt; 功能类似&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fin&lt;/code&gt; 从子程序跳出， 与 &lt;code&gt;step out&lt;/code&gt; 功能类似&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; 打印变量值

&lt;ul&gt;
&lt;li&gt;对于一维数组， 使用 p &lt;code&gt;temp(n)&lt;/code&gt; 会显示temp第&lt;code&gt;n&lt;/code&gt;个元素&lt;/li&gt;
&lt;li&gt;对于二维数组， 使用 p &lt;code&gt;temp(i:j)&lt;/code&gt; 会显示第 &lt;code&gt;i&lt;/code&gt; 和 第 &lt;code&gt;j&lt;/code&gt; 行的元素&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; 显示当前程序所处位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;info&lt;/code&gt; b 显示所设置的断点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del&lt;/code&gt; breakpoints  删除断点&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>
